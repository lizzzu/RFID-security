>>>>>> from aspectlib import Aspect
>>>>>> from models.employee import Employee 
>>>>>> from functools import wraps
       
>>>>>> class AccessControl:
>>>>>>     def __init__(self):
    1:         self.employee_roles = {}
       
>>>>>>     def assign_role(self, employee, role):
    1:         self.employee_roles[employee.employee_id] = role
       
>>>>>>     def check_access(self, employee, required_permission):
               #if employee.employee_id in self.employee_roles:
  121:         employee_role = employee.role.permissions 
  121:         return required_permission in employee_role
               #else:
               #    return False
       
>>>>>> def check_access_control(permission, filename="App/output.txt"):
>>>>>>     def decorator(func):
>>>>>>         @wraps(func)
>>>>>>         def wrapper(self, *args, **kwargs):
  121:             employee = args[0]  # Assuming the first argument is an Employee instance
  121:             if self.access_control.check_access(employee, permission):
  242:                 with open(filename, 'a') as file:
                           #file.write(f"Employee {employee.employee_id} has called {permission}.\n")
  121:                     file.write(f"Access permitted: Employee {employee.employee_id} has the required permission.\n")
  121:                 return func(self, *args, **kwargs)
                   else:
>>>>>>                 with open(filename, 'a') as file:
                           #file.write(f"Employee {employee.employee_id} has called {func.__name__}.\n")
>>>>>>                     file.write(f"Access denied: Employee {employee.employee_id} does not have the required permission.\n")
                       #print(f"Access denied: Employee {employee.employee_id} does not have the required permission.")
>>>>>>         return wrapper
>>>>>>     return decorator
