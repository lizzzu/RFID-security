>>>>>> from aspectlib import Aspect
>>>>>> from models.employee import Employee 
>>>>>> from functools import wraps
       
>>>>>> class Admin:
>>>>>>     def __init__(self):
    1:         self.permission_requests = {}
       
>>>>>>     def request_permission(self, employee, required_permission, access_control, filename="App/output.txt"):
    1:         with open(filename, 'a') as file:
    1:             file.write(f"Permission request from employee with id {employee.employee_id} for permission: {required_permission}\n")
    1:         access_control.process_permission_request(employee, required_permission)
       
>>>>>>     def grant_permission(self, employee, permission, filename="App/output.txt"):
    1:         employee.role.add_permission(permission)
    1:         with open(filename, 'a') as file:
    1:             file.write(f"Permission granted to employee with id {employee.employee_id} for permission: {permission}\n")
       
>>>>>> class AccessControl:
>>>>>>     def __init__(self):
    1:         self.employee_roles = {}
    1:         self.admin = Admin()
       
>>>>>>     def assign_role(self, employee, role):
    2:         self.employee_roles[employee.employee_id] = role
       
>>>>>>     def check_access(self, employee, required_permission):
  132:         employee_role = employee.role.permissions 
  132:         if required_permission in employee_role:
  131:             return True
               else:
    1:             self.request_permission(employee, required_permission)
    1:             return required_permission in employee_role
               
>>>>>>     def request_permission(self, employee, required_permission):
    1:         self.admin.request_permission(employee, required_permission, self)
       
>>>>>>     def process_permission_request(self, employee, permission, filename="App/output.txt"):
    1:         admin_approval = input(f"Admin, do you approve permission request from {employee.employee_id} for {permission}? (yes/no): ")
    1:         if admin_approval.lower() == "yes":
    1:             self.admin.grant_permission(employee, permission)
               else:
>>>>>>             with open(filename, 'a') as file:
>>>>>>                 file.write(f"Permission denied by admin for employee with id {employee.employee_id} for permission: {permission}\n")
       
>>>>>> def check_access_control(permission, filename="App/output.txt"):
>>>>>>     def decorator(func):
>>>>>>         @wraps(func)
>>>>>>         def wrapper(self, *args, **kwargs):
  132:             employee = args[0]  # Assuming the first argument is an Employee instance
  132:             if self.access_control.check_access(employee, permission):
  132:                 with open(filename, 'a') as file:
  132:                     file.write(f"Access permitted: Employee {employee.employee_id} has the required permission.\n")
  132:                 return func(self, *args, **kwargs)
                   else:
>>>>>>                 with open(filename, 'a') as file:
>>>>>>                     file.write(f"Access denied: Employee {employee.employee_id} does not have the required permission.\n")
>>>>>>         return wrapper
>>>>>>     return decorator
