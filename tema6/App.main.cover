>>>>>> import sys
>>>>>> import json
>>>>>> import time
>>>>>> import trace
>>>>>> import threading
       
>>>>>> from models.item import Item
>>>>>> from models.zone import Zone
>>>>>> from models.rfidTag import RFIDTag
>>>>>> from models.rfidReader import RFIDReader
>>>>>> from models.employee import Employee, Role
>>>>>> from models.warehouse import Warehouse
       
>>>>>> def add_to_json(data, data_key, key, value, data_to_add):
12512:     index, _ = next(((i, d) for i, d in enumerate(data[data_key]) if d.get(key) == value), (None, None))
  233:     if index is None:
>>>>>>         data[data_key] += [data_to_add]
>>>>>>         return len(data[data_key]) - 1
       
  233:     data[data_key][index] = data_to_add
  233:     return index
       
>>>>>> def create_database():
           global warehouse, admin
       
    1:     try:
    1:         with open(db, 'r') as file:
    1:             data = json.load(file)
>>>>>>     except FileNotFoundError:
>>>>>>         data = {
>>>>>>             "capacity": -1,
>>>>>>             "employees": [],
>>>>>>             "zones": [],
>>>>>>             "items": [],
>>>>>>             "tags": []
               }
       
    1:     capacity = 230
    1:     warehouse = Warehouse(capacity)
    1:     data["capacity"] = capacity
       
           # create roles
    2:     admin_role = Role(["add_item","remove_item",
    1:                        "add_zone","remove_zone",
    1:                        "add_employee","remove_employee"])
       
    1:     employee_role = Role(["add_item","remove_item"])
       
           # create employees
    1:     id = 12
    1:     admin = Employee(id, "admin", admin_role)
    1:     warehouse.add_employee(admin)
    1:     warehouse.access_control.assign_role(admin, admin_role)
    1:     add_to_json(data, "employees", "id", id, admin.serialize())
       
    1:     id = 41
    1:     employee = Employee(id, "employee1", employee_role)
    1:     warehouse.add_employee(employee)
    1:     warehouse.access_control.assign_role(employee, employee_role)
    1:     add_to_json(data, "employees", "id", id, employee.serialize())
       
           # generate zones, items, and tags
    1:     id = -1
   12:     while( id != 10):
       
   11:         id += 1
   11:         zone = Zone(id, "")
   11:         reader = RFIDReader(id, id)
   11:         zone.add_rfid_reader(reader)
       
   11:         warehouse.add_zone(admin,zone)
   11:         index = add_to_json(data, "zones", "id", id, zone.serialize())
       
   11:         item_id = id*10
  121:         for _ in range(10):
  110:             item_id += 1
  110:             tag_id = item_id
  110:             item = Item(item_id, f"item {item_id}", tag_id)
  110:             tag = RFIDTag(tag_id)
       
  110:             result = warehouse.add_item(admin, item, tag)
  110:             if not result:
>>>>>>                 print("Warehouse is at full capacity. Cannot add more items.")
       
  110:             result = warehouse.add_tag_to_zone(id, tag)
  110:             assert result, f"Zone {id} does not exist"
       
  110:             add_to_json(data, "tags", "id", tag_id, tag.serialize())
  110:             add_to_json(data, "items", "id", item_id, item.serialize())
  110:             if item_id not in data["zones"][index]["items"]:
  110:                 data["zones"][index]["items"] += [item_id]
           
    1:     with open(db, 'w') as file:
    1:         json.dump(data, file, indent=4)
       
>>>>>> def client_function(thread_id):
  600:     for i in range(5):
               # time.sleep(1)
  500:         print(f"Thread {thread_id}: {i}")
       
>>>>>> def main():
           global warehouse, admin
    1:     create_database()
           
    1:     nr_of_threads = 100
    1:     threads = []
  101:     for i in range(nr_of_threads):
  100:         thread = threading.Thread(target=client_function, args=(i,))
  100:         threads.append(thread)
  100:         thread.start()
       
           # add tag in zone 2 - employee is notified
    1:     zone = 2
    1:     tag333 = RFIDTag(333)
    1:     result = warehouse.add_tag_to_zone(zone, tag333)
    1:     assert result, f"Zone {zone} does not exist"
        
           # find tag in warehouse
    1:     target_tag_id = 333
    1:     result = warehouse.find_tag_in_warehouse(target_tag_id)
    1:     assert result, f"Tag {target_tag_id} does not exist"
       
           # print zone and their tags
   12:     for zone in warehouse:
   11:         print(f"Zone: {zone.get_zone_id()}")
       
   11:         zone_tags = zone.get_items()
  133:         print(f"  Tags in the zone: {[tag.tag_id for tag in zone_tags]}")
       
           # find item in warehouse
    1:     tag_id_to_search = 22
    1:     result = warehouse.find_item_location(tag_id_to_search)
    1:     assert result != -1, f"Tag {tag_id_to_search} does not exist"
    1:     print(f"\nTag location: {result}")
       
           # get item info
    1:     item = 22
    1:     result = warehouse.get_item_info_by_id(item)
    1:     assert result, f"Item {item} does not exist"
    1:     print(f"Item info: {result}")
       
           # get item location(zone id)
    1:     result = warehouse.find_zone_location_of_item(item)
    1:     assert result != -1, f"Item {item} does not exist"
    1:     print(f"Tag location: {result}\n")
       
           # add observer - send message to observer when an item was add/remove from a zone
    1:     warehouse.add_observer_to_all_readers(admin)
       
           # move item from one zone to another
    1:     tag_id_to_search = 61
    1:     tag = warehouse.get_tag_by_id(tag_id_to_search)
    1:     assert tag, f"Tag {tag_id_to_search} does not exist"
    1:     warehouse.move_item(tag, 6, 1)
       
    1:     print()
    1:     print(warehouse.get_tags_id_from_zone(1))
    1:     print(warehouse.get_tags_id_from_zone(6))
       
           # find item in warehouse
    1:     item = 100
    1:     result = warehouse.find_item_location(item)
    1:     assert result != -1, f"Item {item} does not exist"
    1:     print(f"\nFind item {item}: zone {result}","\n\n")
       
           # # test access_control
           # role_employee = Role(["add_item","remove_item"])
           # employee1 = Employee(11,"Employee 11",role_employee)
           # add_to_json("employees", "id", 11, employee1.serialize())
       
           # zone = Zone(99,"Zone 99")
           # warehouse.add_zone(employee1,zone)
           # add_to_json("zones", "id", 99, zone.serialize())
       
           # print(employee1.role.permissions)
       
           # for zone in warehouse:
           #     print(f"Zone: {zone.get_zone_id()}")
           
  101:     for thread in threads:
  100:         thread.join()
           
    1:     print("All threads have finished.")
       
>>>>>> if __name__ == "__main__":
>>>>>>     db = './database.json'
       
>>>>>>     with open("App/output.txt", 'w') as file:
>>>>>>         file.write("Fuctions messages.\n")
       
>>>>>>     tracer = trace.Trace(trace=False, ignoredirs=[sys.prefix, sys.exec_prefix])
>>>>>>     tracer.run('main()')
       
>>>>>>     r = tracer.results()
>>>>>>     r.write_results(show_missing=True, coverdir="./tema6")
